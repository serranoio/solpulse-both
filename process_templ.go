// Code generated by templ@v0.2.364 DO NOT EDIT.

package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"
)

func PackageOPF(ebookMiddle EBookMiddle) string {
	str := fmt.Sprintf(`<package xmlns="http://www.idpf.org/2007/opf" xmlns:epub="http://www.idpf.org/2007/ops" version="3.0" xml:lang="en" unique-identifier="pub-id">
			  	<metadata xmlns:dc="http://purl.org/dc/elements/1.1/">
			    <dc:coverage>Content Documents</dc:coverage>
			    <dc:creator>%s</dc:creator>
			    <dc:date>%s</dc:date>
			    <dc:description></dc:description>
			    <dc:identifier id="pub-id"></dc:identifier>
			    <dc:language>%s</dc:language>
			    <dc:publisher></dc:publisher>
			    <dc:title>%s</dc:title>
			    <link rel="dcterms:rights" href="https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document"/>
			    <link rel="dcterms:rightsHolder" href="https://www.w3.org"/>
			  </metadata>
			  <manifest>
			    <item id="content_001" href="content_001.xhtml" media-type="application/xhtml+xml"/>
			    <item id="font_opentype" href="fonts/FrankyToys.otf" media-type="font/otf"/>
			    <item id="font_truetype" href="fonts/Lobster.ttf" media-type="font/ttf"/>
			    <item id="font_woff" href="fonts/Pacifico.woff" media-type="font/woff"/>
			    <item id="font_woff2" href="fonts/Macondo.woff2" media-type="font/woff2"/>
			    <item id="nav" properties="nav" href="nav.xhtml" media-type="application/xhtml+xml"/>
			  </manifest>
			  <spine>
			    <itemref idref="content_001"/>
			  </spine>
			</package>`, ebookMiddle.Meta.Authors[0].Name, ebookMiddle.Meta.Date, ebookMiddle.Meta.Language, ebookMiddle.Meta.Title)

	return str
}

func Nav(ebookMiddle EBookMiddle) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:epub=\"http://www.idpf.org/2007/ops\" xml:lang=\"en\"><head><title>")
		if err != nil {
			return err
		}
		var var_2 string = ebookMiddle.Meta.Title
		_, err = templBuffer.WriteString(templ.EscapeString(var_2))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</title></head><body><nav epub:type=\"toc\"><ol><li><a href=\"content_001.xhtml\">")
		if err != nil {
			return err
		}
		var_3 := `Link to main page`
		_, err = templBuffer.WriteString(var_3)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></li></ol></nav></body></html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

// loop thru all of the content here

func Content(ebookMiddle EBookMiddle) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_4 := templ.GetChildren(ctx)
		if var_4 == nil {
			var_4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:epub=\"http://www.idpf.org/2007/ops\" xml:lang=\"en\"><body>")
		if err != nil {
			return err
		}
		err = templ.Raw(ebookMiddle.Interior.Payload).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</body></html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func ContainerXML(ebookMiddle EBookMiddle) string {

	str := fmt.Sprintf(`<?xml version="1.0" encoding="UTF-8" ?>
<container version="1.0" xmlns="urn:oasis:names:tc:opendocument:xmlns:container">
  <rootfiles>
    <rootfile full-path="EPUB/package.opf" media-type="application/oebps-package+xml" />
  </rootfiles>
</container>`)

	return str
}
